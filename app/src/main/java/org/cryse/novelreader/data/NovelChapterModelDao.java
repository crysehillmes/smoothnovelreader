package org.cryse.novelreader.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.cryse.novelreader.model.NovelChapterModel;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOVEL_CHAPTER_MODEL.
*/
public class NovelChapterModelDao extends AbstractDao<NovelChapterModel, String> {

    public static final String TABLENAME = "NOVEL_CHAPTER_MODEL";

    /**
     * Properties of entity NovelChapterModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property SecondId = new Property(1, String.class, "secondId", true, "SECOND_ID");
        public final static Property Src = new Property(2, String.class, "src", false, "SRC");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property ChapterIndex = new Property(4, Integer.class, "chapterIndex", false, "CHAPTER_INDEX");
    };


    public NovelChapterModelDao(DaoConfig config) {
        super(config);
    }
    
    public NovelChapterModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOVEL_CHAPTER_MODEL' (" + //
                "'ID' TEXT," + // 0: id
                "'SECOND_ID' TEXT PRIMARY KEY," + // 1: secondId
                "'SRC' TEXT," + // 2: src
                "'TITLE' TEXT," + // 3: title
                "'CHAPTER_INDEX' INTEGER);"); // 4: chapterIndex
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_NOVEL_CHAPTER_MODEL_ID ON NOVEL_CHAPTER_MODEL" +
                " (ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_NOVEL_CHAPTER_MODEL_CHAPTER_INDEX ON NOVEL_CHAPTER_MODEL" +
                " (CHAPTER_INDEX);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOVEL_CHAPTER_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NovelChapterModel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String secondId = entity.getSecondId();
        if (secondId != null) {
            stmt.bindString(2, secondId);
        }
 
        String src = entity.getSrc();
        if (src != null) {
            stmt.bindString(3, src);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        Integer chapterIndex = entity.getChapterIndex();
        if (chapterIndex != null) {
            stmt.bindLong(5, chapterIndex);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public NovelChapterModel readEntity(Cursor cursor, int offset) {
        NovelChapterModel entity = new NovelChapterModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // secondId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // src
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // chapterIndex
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NovelChapterModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSecondId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSrc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChapterIndex(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NovelChapterModel entity, long rowId) {
        // Unsupported or missing PK type
        return entity.getSecondId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NovelChapterModel entity) {
        if(entity != null) {
            return entity.getSecondId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    private static final String QUERY_CHAPTERS_SQL = "SELECT ID, SECOND_ID, SRC, TITLE, CHAPTER_INDEX, " +
            "CASE WHEN EXISTS (SELECT SECOND_ID FROM NOVEL_CHAPTER_CONTENT_MODEL WHERE NOVEL_CHAPTER_CONTENT_MODEL.SECOND_ID = NOVEL_CHAPTER_MODEL.SECOND_ID) " +
            "THEN 1 " +
            "ELSE 0 " +
            "END AS CACHED " +
            "FROM NOVEL_CHAPTER_MODEL " +
            "WHERE id=?";

    public List<NovelChapterModel> deepQueryList(String id) {
        List<NovelChapterModel> chapterModels = new ArrayList<>();
        Cursor cursor = db.rawQuery(QUERY_CHAPTERS_SQL, new String[]{id});
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            NovelChapterModel chapter = cursorToNovelChapter(cursor);
            chapterModels.add(chapter);
            cursor.moveToNext();
        }
        // make sure to close the cursor
        cursor.close();
        return chapterModels;
    }

    private NovelChapterModel cursorToNovelChapter(Cursor cursor) {
        NovelChapterModel chapter = new NovelChapterModel();
        chapter.setId(cursor.getString(0));
        chapter.setSecondId(cursor.getString(1));
        chapter.setSrc(cursor.getString(2));
        chapter.setTitle(cursor.getString(3));
        chapter.setChapterIndex(cursor.getInt(4));
        chapter.setCached((cursor.getInt(5) != 0));
        return chapter;
    }
}
