package org.cryse.novelreader.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.cryse.novelreader.model.NovelModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOVEL_MODEL.
*/
public class NovelModelDao extends AbstractDao<NovelModel, String> {

    public static final String TABLENAME = "NOVEL_MODEL";

    /**
     * Properties of entity NovelModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Src = new Property(1, String.class, "src", false, "SRC");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property CategoryName = new Property(4, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property Follow = new Property(5, Long.class, "follow", false, "FOLLOW");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
        public final static Property Summary = new Property(7, String.class, "summary", false, "SUMMARY");
        public final static Property ImageUrl = new Property(8, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ChapterCount = new Property(9, Integer.class, "chapterCount", false, "CHAPTER_COUNT");
        public final static Property LastReadChapterTitle = new Property(10, String.class, "lastReadChapterTitle", false, "LAST_READ_CHAPTER_TITLE");
        public final static Property LatestChapterTitle = new Property(11, String.class, "latestChapterTitle", false, "LATEST_CHAPTER_TITLE");
        public final static Property LatestUpdateCount = new Property(12, Integer.class, "latestUpdateCount", false, "LATEST_UPDATE_COUNT");
        public final static Property SortWeight = new Property(13, Long.class, "sortWeight", false, "SORT_WEIGHT");
    };


    public NovelModelDao(DaoConfig config) {
        super(config);
    }
    
    public NovelModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOVEL_MODEL' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'SRC' TEXT," + // 1: src
                "'TITLE' TEXT," + // 2: title
                "'AUTHOR' TEXT," + // 3: author
                "'CATEGORY_NAME' TEXT," + // 4: categoryName
                "'FOLLOW' INTEGER," + // 5: follow
                "'STATUS' TEXT," + // 6: status
                "'SUMMARY' TEXT," + // 7: summary
                "'IMAGE_URL' TEXT," + // 8: imageUrl
                "'CHAPTER_COUNT' INTEGER," + // 9: chapterCount
                "'LAST_READ_CHAPTER_TITLE' TEXT," + // 10: lastReadChapterTitle
                "'LATEST_CHAPTER_TITLE' TEXT," + // 11: latestChapterTitle
                "'LATEST_UPDATE_COUNT' INTEGER," + // 12: latestUpdateCount
                "'SORT_WEIGHT' INTEGER);"); // 13: sortWeight
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOVEL_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NovelModel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String src = entity.getSrc();
        if (src != null) {
            stmt.bindString(2, src);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(5, categoryName);
        }

        Long follow = entity.getFollow();
        if (follow != null) {
            stmt.bindLong(6, follow);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(8, summary);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(9, imageUrl);
        }
 
        Integer chapterCount = entity.getChapterCount();
        if (chapterCount != null) {
            stmt.bindLong(10, chapterCount);
        }
 
        String lastReadChapterTitle = entity.getLastReadChapterTitle();
        if (lastReadChapterTitle != null) {
            stmt.bindString(11, lastReadChapterTitle);
        }
 
        String latestChapterTitle = entity.getLatestChapterTitle();
        if (latestChapterTitle != null) {
            stmt.bindString(12, latestChapterTitle);
        }
 
        Integer latestUpdateCount = entity.getLatestUpdateCount();
        if (latestUpdateCount != null) {
            stmt.bindLong(13, latestUpdateCount);
        }
 
        Long sortWeight = entity.getSortWeight();
        if (sortWeight != null) {
            stmt.bindLong(14, sortWeight);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NovelModel readEntity(Cursor cursor, int offset) {
        NovelModel entity = new NovelModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // src
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // categoryName
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // follow
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // summary
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // imageUrl
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // chapterCount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lastReadChapterTitle
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // latestChapterTitle
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // latestUpdateCount
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // sortWeight
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NovelModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSrc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategoryName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFollow(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSummary(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImageUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChapterCount(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setLastReadChapterTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLatestChapterTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLatestUpdateCount(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setSortWeight(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NovelModel entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NovelModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
