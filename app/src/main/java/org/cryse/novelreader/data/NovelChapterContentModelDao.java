package org.cryse.novelreader.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.cryse.novelreader.model.NovelChapterContentModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOVEL_CHAPTER_CONTENT_MODEL.
*/
public class NovelChapterContentModelDao extends AbstractDao<NovelChapterContentModel, String> {

    public static final String TABLENAME = "NOVEL_CHAPTER_CONTENT_MODEL";

    /**
     * Properties of entity NovelChapterContentModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property SecondId = new Property(1, String.class, "secondId", true, "SECOND_ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Src = new Property(3, String.class, "src", false, "SRC");
    };


    public NovelChapterContentModelDao(DaoConfig config) {
        super(config);
    }
    
    public NovelChapterContentModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOVEL_CHAPTER_CONTENT_MODEL' (" + //
                "'ID' TEXT," + // 0: id
                "'SECOND_ID' TEXT PRIMARY KEY NOT NULL ," + // 1: secondId
                "'CONTENT' TEXT," + // 2: content
                "'SRC' TEXT);"); // 3: src
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_NOVEL_CHAPTER_CONTENT_MODEL_ID ON NOVEL_CHAPTER_CONTENT_MODEL" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOVEL_CHAPTER_CONTENT_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NovelChapterContentModel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String secondId = entity.getSecondId();
        if (secondId != null) {
            stmt.bindString(2, secondId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String src = entity.getSrc();
        if (src != null) {
            stmt.bindString(4, src);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public NovelChapterContentModel readEntity(Cursor cursor, int offset) {
        NovelChapterContentModel entity = new NovelChapterContentModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // secondId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // src
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NovelChapterContentModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSecondId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSrc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NovelChapterContentModel entity, long rowId) {
        return entity.getSecondId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NovelChapterContentModel entity) {
        if(entity != null) {
            return entity.getSecondId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
